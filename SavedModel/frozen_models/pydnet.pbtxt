node {
  name: "im0"
  op: "Placeholder"
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
        dim {
          size: 320
        }
        dim {
          size: 640
        }
        dim {
          size: 3
        }
      }
    }
  }
}
node {
  name: "encoder/conv1a/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\003\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv1a/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1873171627521515
      }
    }
  }
}
node {
  name: "encoder/conv1a/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1873171627521515
      }
    }
  }
}
node {
  name: "encoder/conv1a/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv1a/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv1a/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv1a/weights/Initializer/random_uniform/max"
  input: "encoder/conv1a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1a/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv1a/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv1a/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1a/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv1a/weights/Initializer/random_uniform/mul"
  input: "encoder/conv1a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1a/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv1a/weights/Assign"
  op: "Assign"
  input: "encoder/conv1a/weights"
  input: "encoder/conv1a/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv1a/weights/read"
  op: "Identity"
  input: "encoder/conv1a/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1a/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "encoder/conv1a/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv1a/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv1a/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv1a/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv1a/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv1a/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv1a/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv1a/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv1a/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv1a/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv1a/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv1a/biases/Assign"
  op: "Assign"
  input: "encoder/conv1a/biases"
  input: "encoder/conv1a/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv1a/biases/read"
  op: "Identity"
  input: "encoder/conv1a/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv1a/Conv2D"
  op: "Conv2D"
  input: "im0"
  input: "encoder/conv1a/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv1a/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv1a/Conv2D"
  input: "encoder/conv1a/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv1a/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv1a/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv1b/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000\020\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv1b/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.14433756470680237
      }
    }
  }
}
node {
  name: "encoder/conv1b/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.14433756470680237
      }
    }
  }
}
node {
  name: "encoder/conv1b/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv1b/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv1b/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv1b/weights/Initializer/random_uniform/max"
  input: "encoder/conv1b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1b/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv1b/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv1b/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1b/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv1b/weights/Initializer/random_uniform/mul"
  input: "encoder/conv1b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1b/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv1b/weights/Assign"
  op: "Assign"
  input: "encoder/conv1b/weights"
  input: "encoder/conv1b/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv1b/weights/read"
  op: "Identity"
  input: "encoder/conv1b/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv1b/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 16
      }
    }
  }
}
node {
  name: "encoder/conv1b/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv1b/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv1b/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv1b/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv1b/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv1b/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv1b/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv1b/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv1b/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv1b/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv1b/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 16
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv1b/biases/Assign"
  op: "Assign"
  input: "encoder/conv1b/biases"
  input: "encoder/conv1b/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv1b/biases/read"
  op: "Identity"
  input: "encoder/conv1b/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv1b/Conv2D"
  op: "Conv2D"
  input: "encoder/conv1a/LeakyRelu"
  input: "encoder/conv1b/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv1b/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv1b/Conv2D"
  input: "encoder/conv1b/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv1b/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv1b/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv2a/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\020\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv2a/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.1178511306643486
      }
    }
  }
}
node {
  name: "encoder/conv2a/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.1178511306643486
      }
    }
  }
}
node {
  name: "encoder/conv2a/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv2a/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv2a/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv2a/weights/Initializer/random_uniform/max"
  input: "encoder/conv2a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2a/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv2a/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv2a/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2a/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv2a/weights/Initializer/random_uniform/mul"
  input: "encoder/conv2a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2a/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 16
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv2a/weights/Assign"
  op: "Assign"
  input: "encoder/conv2a/weights"
  input: "encoder/conv2a/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2a/weights/read"
  op: "Identity"
  input: "encoder/conv2a/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2a/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/conv2a/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv2a/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv2a/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv2a/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv2a/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv2a/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv2a/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv2a/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv2a/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv2a/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv2a/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv2a/biases/Assign"
  op: "Assign"
  input: "encoder/conv2a/biases"
  input: "encoder/conv2a/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2a/biases/read"
  op: "Identity"
  input: "encoder/conv2a/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv2a/Conv2D"
  op: "Conv2D"
  input: "encoder/conv1b/LeakyRelu"
  input: "encoder/conv2a/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2a/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv2a/Conv2D"
  input: "encoder/conv2a/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv2a/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv2a/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv2b/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv2b/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.10206207633018494
      }
    }
  }
}
node {
  name: "encoder/conv2b/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.10206207633018494
      }
    }
  }
}
node {
  name: "encoder/conv2b/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv2b/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv2b/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv2b/weights/Initializer/random_uniform/max"
  input: "encoder/conv2b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2b/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv2b/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv2b/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2b/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv2b/weights/Initializer/random_uniform/mul"
  input: "encoder/conv2b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2b/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv2b/weights/Assign"
  op: "Assign"
  input: "encoder/conv2b/weights"
  input: "encoder/conv2b/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2b/weights/read"
  op: "Identity"
  input: "encoder/conv2b/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv2b/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "encoder/conv2b/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv2b/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv2b/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv2b/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv2b/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv2b/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv2b/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv2b/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv2b/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv2b/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv2b/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv2b/biases/Assign"
  op: "Assign"
  input: "encoder/conv2b/biases"
  input: "encoder/conv2b/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2b/biases/read"
  op: "Identity"
  input: "encoder/conv2b/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv2b/Conv2D"
  op: "Conv2D"
  input: "encoder/conv2a/LeakyRelu"
  input: "encoder/conv2b/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv2b/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv2b/Conv2D"
  input: "encoder/conv2b/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv2b/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv2b/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv3a/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv3a/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "encoder/conv3a/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "encoder/conv3a/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv3a/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv3a/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv3a/weights/Initializer/random_uniform/max"
  input: "encoder/conv3a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3a/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv3a/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv3a/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3a/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv3a/weights/Initializer/random_uniform/mul"
  input: "encoder/conv3a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3a/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv3a/weights/Assign"
  op: "Assign"
  input: "encoder/conv3a/weights"
  input: "encoder/conv3a/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv3a/weights/read"
  op: "Identity"
  input: "encoder/conv3a/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3a/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "encoder/conv3a/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv3a/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv3a/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv3a/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv3a/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv3a/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv3a/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv3a/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv3a/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv3a/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv3a/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv3a/biases/Assign"
  op: "Assign"
  input: "encoder/conv3a/biases"
  input: "encoder/conv3a/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv3a/biases/read"
  op: "Identity"
  input: "encoder/conv3a/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv3a/Conv2D"
  op: "Conv2D"
  input: "encoder/conv2b/LeakyRelu"
  input: "encoder/conv3a/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv3a/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv3a/Conv2D"
  input: "encoder/conv3a/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv3a/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv3a/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv3b/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv3b/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07216878235340118
      }
    }
  }
}
node {
  name: "encoder/conv3b/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07216878235340118
      }
    }
  }
}
node {
  name: "encoder/conv3b/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv3b/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv3b/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv3b/weights/Initializer/random_uniform/max"
  input: "encoder/conv3b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3b/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv3b/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv3b/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3b/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv3b/weights/Initializer/random_uniform/mul"
  input: "encoder/conv3b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3b/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv3b/weights/Assign"
  op: "Assign"
  input: "encoder/conv3b/weights"
  input: "encoder/conv3b/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv3b/weights/read"
  op: "Identity"
  input: "encoder/conv3b/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv3b/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "encoder/conv3b/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv3b/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv3b/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv3b/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv3b/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv3b/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv3b/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv3b/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv3b/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv3b/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv3b/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv3b/biases/Assign"
  op: "Assign"
  input: "encoder/conv3b/biases"
  input: "encoder/conv3b/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv3b/biases/read"
  op: "Identity"
  input: "encoder/conv3b/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv3b/Conv2D"
  op: "Conv2D"
  input: "encoder/conv3a/LeakyRelu"
  input: "encoder/conv3b/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv3b/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv3b/Conv2D"
  input: "encoder/conv3b/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv3b/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv3b/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv4a/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv4a/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06454972177743912
      }
    }
  }
}
node {
  name: "encoder/conv4a/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06454972177743912
      }
    }
  }
}
node {
  name: "encoder/conv4a/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv4a/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv4a/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv4a/weights/Initializer/random_uniform/max"
  input: "encoder/conv4a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4a/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv4a/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv4a/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4a/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv4a/weights/Initializer/random_uniform/mul"
  input: "encoder/conv4a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4a/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv4a/weights/Assign"
  op: "Assign"
  input: "encoder/conv4a/weights"
  input: "encoder/conv4a/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv4a/weights/read"
  op: "Identity"
  input: "encoder/conv4a/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4a/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "encoder/conv4a/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv4a/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv4a/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv4a/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv4a/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv4a/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv4a/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv4a/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv4a/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv4a/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv4a/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv4a/biases/Assign"
  op: "Assign"
  input: "encoder/conv4a/biases"
  input: "encoder/conv4a/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv4a/biases/read"
  op: "Identity"
  input: "encoder/conv4a/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv4a/Conv2D"
  op: "Conv2D"
  input: "encoder/conv3b/LeakyRelu"
  input: "encoder/conv4a/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv4a/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv4a/Conv2D"
  input: "encoder/conv4a/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv4a/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv4a/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv4b/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv4b/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0589255653321743
      }
    }
  }
}
node {
  name: "encoder/conv4b/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0589255653321743
      }
    }
  }
}
node {
  name: "encoder/conv4b/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv4b/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv4b/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv4b/weights/Initializer/random_uniform/max"
  input: "encoder/conv4b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4b/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv4b/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv4b/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4b/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv4b/weights/Initializer/random_uniform/mul"
  input: "encoder/conv4b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4b/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv4b/weights/Assign"
  op: "Assign"
  input: "encoder/conv4b/weights"
  input: "encoder/conv4b/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv4b/weights/read"
  op: "Identity"
  input: "encoder/conv4b/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv4b/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "encoder/conv4b/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv4b/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv4b/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv4b/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv4b/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv4b/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv4b/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv4b/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv4b/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv4b/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv4b/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv4b/biases/Assign"
  op: "Assign"
  input: "encoder/conv4b/biases"
  input: "encoder/conv4b/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv4b/biases/read"
  op: "Identity"
  input: "encoder/conv4b/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv4b/Conv2D"
  op: "Conv2D"
  input: "encoder/conv4a/LeakyRelu"
  input: "encoder/conv4b/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv4b/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv4b/Conv2D"
  input: "encoder/conv4b/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv4b/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv4b/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv5a/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv5a/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.054554473608732224
      }
    }
  }
}
node {
  name: "encoder/conv5a/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.054554473608732224
      }
    }
  }
}
node {
  name: "encoder/conv5a/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv5a/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv5a/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv5a/weights/Initializer/random_uniform/max"
  input: "encoder/conv5a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5a/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv5a/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv5a/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5a/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv5a/weights/Initializer/random_uniform/mul"
  input: "encoder/conv5a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5a/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv5a/weights/Assign"
  op: "Assign"
  input: "encoder/conv5a/weights"
  input: "encoder/conv5a/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv5a/weights/read"
  op: "Identity"
  input: "encoder/conv5a/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5a/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder/conv5a/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv5a/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv5a/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv5a/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv5a/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv5a/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv5a/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv5a/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv5a/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv5a/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv5a/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv5a/biases/Assign"
  op: "Assign"
  input: "encoder/conv5a/biases"
  input: "encoder/conv5a/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv5a/biases/read"
  op: "Identity"
  input: "encoder/conv5a/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv5a/Conv2D"
  op: "Conv2D"
  input: "encoder/conv4b/LeakyRelu"
  input: "encoder/conv5a/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv5a/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv5a/Conv2D"
  input: "encoder/conv5a/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv5a/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv5a/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv5b/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\200\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv5b/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05103103816509247
      }
    }
  }
}
node {
  name: "encoder/conv5b/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05103103816509247
      }
    }
  }
}
node {
  name: "encoder/conv5b/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv5b/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv5b/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv5b/weights/Initializer/random_uniform/max"
  input: "encoder/conv5b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5b/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv5b/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv5b/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5b/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv5b/weights/Initializer/random_uniform/mul"
  input: "encoder/conv5b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5b/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv5b/weights/Assign"
  op: "Assign"
  input: "encoder/conv5b/weights"
  input: "encoder/conv5b/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv5b/weights/read"
  op: "Identity"
  input: "encoder/conv5b/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv5b/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 128
      }
    }
  }
}
node {
  name: "encoder/conv5b/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv5b/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv5b/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv5b/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv5b/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv5b/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv5b/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv5b/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv5b/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv5b/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv5b/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 128
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv5b/biases/Assign"
  op: "Assign"
  input: "encoder/conv5b/biases"
  input: "encoder/conv5b/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv5b/biases/read"
  op: "Identity"
  input: "encoder/conv5b/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv5b/Conv2D"
  op: "Conv2D"
  input: "encoder/conv5a/LeakyRelu"
  input: "encoder/conv5b/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv5b/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv5b/Conv2D"
  input: "encoder/conv5b/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv5b/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv5b/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv6a/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\200\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv6a/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.04564354568719864
      }
    }
  }
}
node {
  name: "encoder/conv6a/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.04564354568719864
      }
    }
  }
}
node {
  name: "encoder/conv6a/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv6a/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv6a/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv6a/weights/Initializer/random_uniform/max"
  input: "encoder/conv6a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6a/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv6a/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv6a/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6a/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv6a/weights/Initializer/random_uniform/mul"
  input: "encoder/conv6a/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6a/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 128
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv6a/weights/Assign"
  op: "Assign"
  input: "encoder/conv6a/weights"
  input: "encoder/conv6a/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv6a/weights/read"
  op: "Identity"
  input: "encoder/conv6a/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6a/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "encoder/conv6a/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv6a/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv6a/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv6a/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv6a/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv6a/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv6a/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv6a/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv6a/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv6a/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv6a/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv6a/biases/Assign"
  op: "Assign"
  input: "encoder/conv6a/biases"
  input: "encoder/conv6a/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv6a/biases/read"
  op: "Identity"
  input: "encoder/conv6a/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
}
node {
  name: "encoder/conv6a/Conv2D"
  op: "Conv2D"
  input: "encoder/conv5b/LeakyRelu"
  input: "encoder/conv6a/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 2
        i: 2
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv6a/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv6a/Conv2D"
  input: "encoder/conv6a/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv6a/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv6a/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "encoder/conv6b/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000\300\000\000\000"
      }
    }
  }
}
node {
  name: "encoder/conv6b/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0416666679084301
      }
    }
  }
}
node {
  name: "encoder/conv6b/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0416666679084301
      }
    }
  }
}
node {
  name: "encoder/conv6b/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "encoder/conv6b/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv6b/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "encoder/conv6b/weights/Initializer/random_uniform/max"
  input: "encoder/conv6b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6b/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "encoder/conv6b/weights/Initializer/random_uniform/RandomUniform"
  input: "encoder/conv6b/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6b/weights/Initializer/random_uniform"
  op: "Add"
  input: "encoder/conv6b/weights/Initializer/random_uniform/mul"
  input: "encoder/conv6b/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6b/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv6b/weights/Assign"
  op: "Assign"
  input: "encoder/conv6b/weights"
  input: "encoder/conv6b/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv6b/weights/read"
  op: "Identity"
  input: "encoder/conv6b/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
}
node {
  name: "encoder/conv6b/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 192
      }
    }
  }
}
node {
  name: "encoder/conv6b/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "encoder/conv6b/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "encoder/conv6b/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "encoder/conv6b/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "encoder/conv6b/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "encoder/conv6b/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "encoder/conv6b/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv6b/biases/Initializer/truncated_normal"
  op: "Add"
  input: "encoder/conv6b/biases/Initializer/truncated_normal/mul"
  input: "encoder/conv6b/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv6b/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 192
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "encoder/conv6b/biases/Assign"
  op: "Assign"
  input: "encoder/conv6b/biases"
  input: "encoder/conv6b/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv6b/biases/read"
  op: "Identity"
  input: "encoder/conv6b/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
}
node {
  name: "encoder/conv6b/Conv2D"
  op: "Conv2D"
  input: "encoder/conv6a/LeakyRelu"
  input: "encoder/conv6b/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "encoder/conv6b/BiasAdd"
  op: "BiasAdd"
  input: "encoder/conv6b/Conv2D"
  input: "encoder/conv6b/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "encoder/conv6b/LeakyRelu"
  op: "LeakyRelu"
  input: "encoder/conv6b/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\300\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.048112522810697556
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.048112522810697556
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 192
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/weights/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/biases/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/Conv2D"
  op: "Conv2D"
  input: "encoder/conv6b/LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L6/estimator/build_estimator/disp-3/Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-3/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/weights/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/biases/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/Conv2D"
  op: "Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-3/LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L6/estimator/build_estimator/disp-4/Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-4/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/weights/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/biases/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/Conv2D"
  op: "Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-4/LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L6/estimator/build_estimator/disp-5/Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-5/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/weights/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/biases/read"
  op: "Identity"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/Conv2D"
  op: "Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-5/LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L6/estimator/build_estimator/disp-6/Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L6/estimator/build_estimator/disp-6/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L6/estimator/build_estimator/disp-6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/max"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/mul"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/get_disp/weights"
  input: "decoder/L6/estimator/get_disp/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/weights/read"
  op: "Identity"
  input: "decoder/L6/estimator/get_disp/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  input: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/Assign"
  op: "Assign"
  input: "decoder/L6/estimator/get_disp/biases"
  input: "decoder/L6/estimator/get_disp/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/biases/read"
  op: "Identity"
  input: "decoder/L6/estimator/get_disp/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/Conv2D"
  op: "Conv2D"
  input: "decoder/L6/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L6/estimator/get_disp/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/estimator/get_disp/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L6/estimator/get_disp/Conv2D"
  input: "decoder/L6/estimator/get_disp/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/resize/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\n\000\000\000\024\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "decoder/L6/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Assign"
  op: "Assign"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/read"
  op: "Identity"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Assign"
  op: "Assign"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/read"
  op: "Identity"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  op: "Conv2D"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/concat"
  op: "ConcatV2"
  input: "encoder/conv5b/LeakyRelu"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\210\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05360562726855278
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05360562726855278
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 136
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/weights/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/biases/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/Conv2D"
  op: "Conv2D"
  input: "decoder/L5/estimator/build_estimator/concat"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L5/estimator/build_estimator/disp-3/Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-3/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/disp-3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/weights/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/biases/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/Conv2D"
  op: "Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-3/LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L5/estimator/build_estimator/disp-4/Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-4/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/disp-4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/weights/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/biases/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/Conv2D"
  op: "Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-4/LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L5/estimator/build_estimator/disp-5/Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-5/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/disp-5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/weights/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/biases/read"
  op: "Identity"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/Conv2D"
  op: "Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-5/LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L5/estimator/build_estimator/disp-6/Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L5/estimator/build_estimator/disp-6/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L5/estimator/build_estimator/disp-6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/max"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/mul"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/get_disp/weights"
  input: "decoder/L5/estimator/get_disp/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/weights/read"
  op: "Identity"
  input: "decoder/L5/estimator/get_disp/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  input: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/Assign"
  op: "Assign"
  input: "decoder/L5/estimator/get_disp/biases"
  input: "decoder/L5/estimator/get_disp/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/biases/read"
  op: "Identity"
  input: "decoder/L5/estimator/get_disp/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/Conv2D"
  op: "Conv2D"
  input: "decoder/L5/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L5/estimator/get_disp/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/estimator/get_disp/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L5/estimator/get_disp/Conv2D"
  input: "decoder/L5/estimator/get_disp/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/resize/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\024\000\000\000(\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "decoder/L5/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Assign"
  op: "Assign"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/read"
  op: "Identity"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Assign"
  op: "Assign"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/read"
  op: "Identity"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  op: "Conv2D"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/concat"
  op: "ConcatV2"
  input: "encoder/conv4b/LeakyRelu"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000h\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.05773502588272095
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.05773502588272095
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 104
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/weights/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/biases/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/Conv2D"
  op: "Conv2D"
  input: "decoder/L4/estimator/build_estimator/concat"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L4/estimator/build_estimator/disp-3/Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-3/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/disp-3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/weights/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/biases/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/Conv2D"
  op: "Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-3/LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L4/estimator/build_estimator/disp-4/Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-4/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/disp-4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/weights/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/biases/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/Conv2D"
  op: "Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-4/LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L4/estimator/build_estimator/disp-5/Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-5/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/disp-5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/weights/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/biases/read"
  op: "Identity"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/Conv2D"
  op: "Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-5/LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L4/estimator/build_estimator/disp-6/Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L4/estimator/build_estimator/disp-6/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L4/estimator/build_estimator/disp-6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/max"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/mul"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/get_disp/weights"
  input: "decoder/L4/estimator/get_disp/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/weights/read"
  op: "Identity"
  input: "decoder/L4/estimator/get_disp/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  input: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/Assign"
  op: "Assign"
  input: "decoder/L4/estimator/get_disp/biases"
  input: "decoder/L4/estimator/get_disp/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/biases/read"
  op: "Identity"
  input: "decoder/L4/estimator/get_disp/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/Conv2D"
  op: "Conv2D"
  input: "decoder/L4/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L4/estimator/get_disp/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/estimator/get_disp/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L4/estimator/get_disp/Conv2D"
  input: "decoder/L4/estimator/get_disp/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/resize/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "(\000\000\000P\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "decoder/L4/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Assign"
  op: "Assign"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/read"
  op: "Identity"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Assign"
  op: "Assign"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/read"
  op: "Identity"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  op: "Conv2D"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/concat"
  op: "ConcatV2"
  input: "encoder/conv3b/LeakyRelu"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000H\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0629940778017044
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0629940778017044
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 72
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/weights/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/biases/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/Conv2D"
  op: "Conv2D"
  input: "decoder/L3/estimator/build_estimator/concat"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L3/estimator/build_estimator/disp-3/Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-3/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/disp-3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/weights/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/biases/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/Conv2D"
  op: "Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-3/LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L3/estimator/build_estimator/disp-4/Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-4/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/disp-4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/weights/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/biases/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/Conv2D"
  op: "Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-4/LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L3/estimator/build_estimator/disp-5/Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-5/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/disp-5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/weights/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/biases/read"
  op: "Identity"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/Conv2D"
  op: "Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-5/LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L3/estimator/build_estimator/disp-6/Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L3/estimator/build_estimator/disp-6/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L3/estimator/build_estimator/disp-6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/max"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/mul"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/get_disp/weights"
  input: "decoder/L3/estimator/get_disp/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/weights/read"
  op: "Identity"
  input: "decoder/L3/estimator/get_disp/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  input: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/Assign"
  op: "Assign"
  input: "decoder/L3/estimator/get_disp/biases"
  input: "decoder/L3/estimator/get_disp/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/biases/read"
  op: "Identity"
  input: "decoder/L3/estimator/get_disp/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/Conv2D"
  op: "Conv2D"
  input: "decoder/L3/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L3/estimator/get_disp/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/estimator/get_disp/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L3/estimator/get_disp/Conv2D"
  input: "decoder/L3/estimator/get_disp/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/resize/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "P\000\000\000\240\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "decoder/L3/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Assign"
  op: "Assign"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/read"
  op: "Identity"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Assign"
  op: "Assign"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/read"
  op: "Identity"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  op: "Conv2D"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/concat"
  op: "ConcatV2"
  input: "encoder/conv2b/LeakyRelu"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000(\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07001400738954544
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07001400738954544
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 40
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/weights/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/biases/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/Conv2D"
  op: "Conv2D"
  input: "decoder/L2/estimator/build_estimator/concat"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L2/estimator/build_estimator/disp-3/Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-3/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/disp-3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/weights/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/biases/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/Conv2D"
  op: "Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-3/LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L2/estimator/build_estimator/disp-4/Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-4/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/disp-4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/weights/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/biases/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/Conv2D"
  op: "Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-4/LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L2/estimator/build_estimator/disp-5/Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-5/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/disp-5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/weights/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/biases/read"
  op: "Identity"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/Conv2D"
  op: "Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-5/LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L2/estimator/build_estimator/disp-6/Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L2/estimator/build_estimator/disp-6/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L2/estimator/build_estimator/disp-6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/max"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/mul"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/get_disp/weights"
  input: "decoder/L2/estimator/get_disp/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/weights/read"
  op: "Identity"
  input: "decoder/L2/estimator/get_disp/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  input: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/Assign"
  op: "Assign"
  input: "decoder/L2/estimator/get_disp/biases"
  input: "decoder/L2/estimator/get_disp/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/biases/read"
  op: "Identity"
  input: "decoder/L2/estimator/get_disp/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/Conv2D"
  op: "Conv2D"
  input: "decoder/L2/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L2/estimator/get_disp/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/estimator/get_disp/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L2/estimator/get_disp/Conv2D"
  input: "decoder/L2/estimator/get_disp/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/resize/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "\240\000\000\000@\001\000\000"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "decoder/L2/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\002\000\000\000\002\000\000\000\010\000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.3061862289905548
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/max"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/mul"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 2
        }
        dim {
          size: 2
        }
        dim {
          size: 8
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Assign"
  op: "Assign"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/read"
  op: "Identity"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mul"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Assign"
  op: "Assign"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/read"
  op: "Identity"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  op: "Conv2D"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/resize/ResizeBilinear"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/Conv2D"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/concat/axis"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
        }
        int_val: -1
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/concat"
  op: "ConcatV2"
  input: "encoder/conv1b/LeakyRelu"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/concat/axis"
  attr {
    key: "N"
    value {
      i: 2
    }
  }
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\030\000\000\000`\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.07453560084104538
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.07453560084104538
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/max"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/mul"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 24
        }
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/weights/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 96
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mul"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 96
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/biases/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/Conv2D"
  op: "Conv2D"
  input: "decoder/L1/estimator/build_estimator/concat"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L1/estimator/build_estimator/disp-3/Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-3/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/disp-3/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000`\000\000\000@\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.06454972177743912
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/max"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/mul"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 96
        }
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/weights/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 64
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mul"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 64
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/biases/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/Conv2D"
  op: "Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-3/LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L1/estimator/build_estimator/disp-4/Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-4/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/disp-4/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000@\000\000\000 \000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0833333358168602
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/max"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/mul"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 64
        }
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/weights/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 32
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mul"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 32
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/biases/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/Conv2D"
  op: "Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-4/LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L1/estimator/build_estimator/disp-5/Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-5/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/disp-5/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000 \000\000\000\010\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.12909944355487823
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/max"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/mul"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 32
        }
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/weights/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 8
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mul"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 8
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/biases/read"
  op: "Identity"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/Conv2D"
  op: "Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-5/LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L1/estimator/build_estimator/disp-6/Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/L1/estimator/build_estimator/disp-6/LeakyRelu"
  op: "LeakyRelu"
  input: "decoder/L1/estimator/build_estimator/disp-6/BiasAdd"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "alpha"
    value {
      f: 0.20000000298023224
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\003\000\000\000\003\000\000\000\010\000\000\000\001\000\000\000"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/min"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: -0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/max"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.27216553688049316
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  op: "RandomUniform"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/sub"
  op: "Sub"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/max"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/mul"
  op: "Mul"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/RandomUniform"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/sub"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform"
  op: "Add"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/mul"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform/min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 3
        }
        dim {
          size: 3
        }
        dim {
          size: 8
        }
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/get_disp/weights"
  input: "decoder/L1/estimator/get_disp/weights/Initializer/random_uniform"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/weights/read"
  op: "Identity"
  input: "decoder/L1/estimator/get_disp/weights"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 1
          }
        }
        int_val: 1
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 0.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  op: "Const"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_FLOAT
        tensor_shape {
        }
        float_val: 1.0
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  op: "TruncatedNormal"
  input: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/shape"
  attr {
    key: "T"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "seed"
    value {
      i: 0
    }
  }
  attr {
    key: "seed2"
    value {
      i: 0
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  op: "Mul"
  input: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/TruncatedNormal"
  input: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/stddev"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal"
  op: "Add"
  input: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/mul"
  input: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal/mean"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases"
  op: "VariableV2"
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "container"
    value {
      s: ""
    }
  }
  attr {
    key: "dtype"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "shape"
    value {
      shape {
        dim {
          size: 1
        }
      }
    }
  }
  attr {
    key: "shared_name"
    value {
      s: ""
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/get_disp/biases"
  input: "decoder/L1/estimator/get_disp/biases/Initializer/truncated_normal"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/biases/read"
  op: "Identity"
  input: "decoder/L1/estimator/get_disp/biases"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/Conv2D"
  op: "Conv2D"
  input: "decoder/L1/estimator/build_estimator/disp-6/LeakyRelu"
  input: "decoder/L1/estimator/get_disp/weights/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
  attr {
    key: "dilations"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "explicit_paddings"
    value {
      list {
      }
    }
  }
  attr {
    key: "padding"
    value {
      s: "SAME"
    }
  }
  attr {
    key: "strides"
    value {
      list {
        i: 1
        i: 1
        i: 1
        i: 1
      }
    }
  }
  attr {
    key: "use_cudnn_on_gpu"
    value {
      b: true
    }
  }
}
node {
  name: "decoder/L1/estimator/get_disp/BiasAdd"
  op: "BiasAdd"
  input: "decoder/L1/estimator/get_disp/Conv2D"
  input: "decoder/L1/estimator/get_disp/biases/read"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "data_format"
    value {
      s: "NHWC"
    }
  }
}
node {
  name: "decoder/half/resize/size"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 2
          }
        }
        tensor_content: "@\001\000\000\200\002\000\000"
      }
    }
  }
}
node {
  name: "decoder/half/resize/ResizeBilinear"
  op: "ResizeBilinear"
  input: "decoder/L1/estimator/get_disp/BiasAdd"
  input: "decoder/half/resize/size"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "align_corners"
    value {
      b: false
    }
  }
  attr {
    key: "half_pixel_centers"
    value {
      b: false
    }
  }
}
node {
  name: "Relu"
  op: "Relu"
  input: "decoder/half/resize/ResizeBilinear"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "Const"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Min"
  op: "Min"
  input: "Relu"
  input: "Const"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "Const_1"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_INT32
        tensor_shape {
          dim {
            size: 4
          }
        }
        tensor_content: "\000\000\000\000\001\000\000\000\002\000\000\000\003\000\000\000"
      }
    }
  }
}
node {
  name: "Max"
  op: "Max"
  input: "Relu"
  input: "Const_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "Tidx"
    value {
      type: DT_INT32
    }
  }
  attr {
    key: "keep_dims"
    value {
      b: false
    }
  }
}
node {
  name: "sub"
  op: "Sub"
  input: "Relu"
  input: "Min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "sub_1"
  op: "Sub"
  input: "Max"
  input: "Min"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "truediv"
  op: "RealDiv"
  input: "sub"
  input: "sub_1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
}
node {
  name: "save/filename/input"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
        }
        string_val: "model"
      }
    }
  }
}
node {
  name: "save/filename"
  op: "PlaceholderWithDefault"
  input: "save/filename/input"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/Const"
  op: "PlaceholderWithDefault"
  input: "save/filename"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "shape"
    value {
      shape {
      }
    }
  }
}
node {
  name: "save/SaveV2/tensor_names"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 94
          }
        }
        string_val: "decoder/L1/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L1/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L1/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L1/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L1/estimator/get_disp/biases"
        string_val: "decoder/L1/estimator/get_disp/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L2/estimator/get_disp/biases"
        string_val: "decoder/L2/estimator/get_disp/weights"
        string_val: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L3/estimator/get_disp/biases"
        string_val: "decoder/L3/estimator/get_disp/weights"
        string_val: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L4/estimator/get_disp/biases"
        string_val: "decoder/L4/estimator/get_disp/weights"
        string_val: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L5/estimator/get_disp/biases"
        string_val: "decoder/L5/estimator/get_disp/weights"
        string_val: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L6/estimator/get_disp/biases"
        string_val: "decoder/L6/estimator/get_disp/weights"
        string_val: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "encoder/conv1a/biases"
        string_val: "encoder/conv1a/weights"
        string_val: "encoder/conv1b/biases"
        string_val: "encoder/conv1b/weights"
        string_val: "encoder/conv2a/biases"
        string_val: "encoder/conv2a/weights"
        string_val: "encoder/conv2b/biases"
        string_val: "encoder/conv2b/weights"
        string_val: "encoder/conv3a/biases"
        string_val: "encoder/conv3a/weights"
        string_val: "encoder/conv3b/biases"
        string_val: "encoder/conv3b/weights"
        string_val: "encoder/conv4a/biases"
        string_val: "encoder/conv4a/weights"
        string_val: "encoder/conv4b/biases"
        string_val: "encoder/conv4b/weights"
        string_val: "encoder/conv5a/biases"
        string_val: "encoder/conv5a/weights"
        string_val: "encoder/conv5b/biases"
        string_val: "encoder/conv5b/weights"
        string_val: "encoder/conv6a/biases"
        string_val: "encoder/conv6a/weights"
        string_val: "encoder/conv6b/biases"
        string_val: "encoder/conv6b/weights"
      }
    }
  }
}
node {
  name: "save/SaveV2/shape_and_slices"
  op: "Const"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 94
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/SaveV2"
  op: "SaveV2"
  input: "save/Const"
  input: "save/SaveV2/tensor_names"
  input: "save/SaveV2/shape_and_slices"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights"
  input: "decoder/L1/estimator/get_disp/biases"
  input: "decoder/L1/estimator/get_disp/weights"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights"
  input: "decoder/L2/estimator/get_disp/biases"
  input: "decoder/L2/estimator/get_disp/weights"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights"
  input: "decoder/L3/estimator/get_disp/biases"
  input: "decoder/L3/estimator/get_disp/weights"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights"
  input: "decoder/L4/estimator/get_disp/biases"
  input: "decoder/L4/estimator/get_disp/weights"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights"
  input: "decoder/L5/estimator/get_disp/biases"
  input: "decoder/L5/estimator/get_disp/weights"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights"
  input: "decoder/L6/estimator/get_disp/biases"
  input: "decoder/L6/estimator/get_disp/weights"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "encoder/conv1a/biases"
  input: "encoder/conv1a/weights"
  input: "encoder/conv1b/biases"
  input: "encoder/conv1b/weights"
  input: "encoder/conv2a/biases"
  input: "encoder/conv2a/weights"
  input: "encoder/conv2b/biases"
  input: "encoder/conv2b/weights"
  input: "encoder/conv3a/biases"
  input: "encoder/conv3a/weights"
  input: "encoder/conv3b/biases"
  input: "encoder/conv3b/weights"
  input: "encoder/conv4a/biases"
  input: "encoder/conv4a/weights"
  input: "encoder/conv4b/biases"
  input: "encoder/conv4b/weights"
  input: "encoder/conv5a/biases"
  input: "encoder/conv5a/weights"
  input: "encoder/conv5b/biases"
  input: "encoder/conv5b/weights"
  input: "encoder/conv6a/biases"
  input: "encoder/conv6a/weights"
  input: "encoder/conv6b/biases"
  input: "encoder/conv6b/weights"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/control_dependency"
  op: "Identity"
  input: "save/Const"
  input: "^save/SaveV2"
  attr {
    key: "T"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@save/Const"
      }
    }
  }
}
node {
  name: "save/RestoreV2/tensor_names"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 94
          }
        }
        string_val: "decoder/L1/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L1/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L1/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L1/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L1/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L1/estimator/get_disp/biases"
        string_val: "decoder/L1/estimator/get_disp/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L2/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L2/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L2/estimator/get_disp/biases"
        string_val: "decoder/L2/estimator/get_disp/weights"
        string_val: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L3/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L3/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L3/estimator/get_disp/biases"
        string_val: "decoder/L3/estimator/get_disp/weights"
        string_val: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L4/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L4/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L4/estimator/get_disp/biases"
        string_val: "decoder/L4/estimator/get_disp/weights"
        string_val: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L5/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L5/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L5/estimator/get_disp/biases"
        string_val: "decoder/L5/estimator/get_disp/weights"
        string_val: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-3/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-3/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-4/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-4/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-5/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-5/weights"
        string_val: "decoder/L6/estimator/build_estimator/disp-6/biases"
        string_val: "decoder/L6/estimator/build_estimator/disp-6/weights"
        string_val: "decoder/L6/estimator/get_disp/biases"
        string_val: "decoder/L6/estimator/get_disp/weights"
        string_val: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
        string_val: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
        string_val: "encoder/conv1a/biases"
        string_val: "encoder/conv1a/weights"
        string_val: "encoder/conv1b/biases"
        string_val: "encoder/conv1b/weights"
        string_val: "encoder/conv2a/biases"
        string_val: "encoder/conv2a/weights"
        string_val: "encoder/conv2b/biases"
        string_val: "encoder/conv2b/weights"
        string_val: "encoder/conv3a/biases"
        string_val: "encoder/conv3a/weights"
        string_val: "encoder/conv3b/biases"
        string_val: "encoder/conv3b/weights"
        string_val: "encoder/conv4a/biases"
        string_val: "encoder/conv4a/weights"
        string_val: "encoder/conv4b/biases"
        string_val: "encoder/conv4b/weights"
        string_val: "encoder/conv5a/biases"
        string_val: "encoder/conv5a/weights"
        string_val: "encoder/conv5b/biases"
        string_val: "encoder/conv5b/weights"
        string_val: "encoder/conv6a/biases"
        string_val: "encoder/conv6a/weights"
        string_val: "encoder/conv6b/biases"
        string_val: "encoder/conv6b/weights"
      }
    }
  }
}
node {
  name: "save/RestoreV2/shape_and_slices"
  op: "Const"
  device: "/device:CPU:0"
  attr {
    key: "dtype"
    value {
      type: DT_STRING
    }
  }
  attr {
    key: "value"
    value {
      tensor {
        dtype: DT_STRING
        tensor_shape {
          dim {
            size: 94
          }
        }
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
        string_val: ""
      }
    }
  }
}
node {
  name: "save/RestoreV2"
  op: "RestoreV2"
  input: "save/Const"
  input: "save/RestoreV2/tensor_names"
  input: "save/RestoreV2/shape_and_slices"
  device: "/device:CPU:0"
  attr {
    key: "dtypes"
    value {
      list {
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
        type: DT_FLOAT
      }
    }
  }
}
node {
  name: "save/Assign"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-3/biases"
  input: "save/RestoreV2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_1"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-3/weights"
  input: "save/RestoreV2:1"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_2"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-4/biases"
  input: "save/RestoreV2:2"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_3"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-4/weights"
  input: "save/RestoreV2:3"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_4"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-5/biases"
  input: "save/RestoreV2:4"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_5"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-5/weights"
  input: "save/RestoreV2:5"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_6"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-6/biases"
  input: "save/RestoreV2:6"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_7"
  op: "Assign"
  input: "decoder/L1/estimator/build_estimator/disp-6/weights"
  input: "save/RestoreV2:7"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_8"
  op: "Assign"
  input: "decoder/L1/estimator/get_disp/biases"
  input: "save/RestoreV2:8"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_9"
  op: "Assign"
  input: "decoder/L1/estimator/get_disp/weights"
  input: "save/RestoreV2:9"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L1/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_10"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-3/biases"
  input: "save/RestoreV2:10"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_11"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-3/weights"
  input: "save/RestoreV2:11"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_12"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-4/biases"
  input: "save/RestoreV2:12"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_13"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-4/weights"
  input: "save/RestoreV2:13"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_14"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-5/biases"
  input: "save/RestoreV2:14"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_15"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-5/weights"
  input: "save/RestoreV2:15"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_16"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-6/biases"
  input: "save/RestoreV2:16"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_17"
  op: "Assign"
  input: "decoder/L2/estimator/build_estimator/disp-6/weights"
  input: "save/RestoreV2:17"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_18"
  op: "Assign"
  input: "decoder/L2/estimator/get_disp/biases"
  input: "save/RestoreV2:18"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_19"
  op: "Assign"
  input: "decoder/L2/estimator/get_disp/weights"
  input: "save/RestoreV2:19"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_20"
  op: "Assign"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "save/RestoreV2:20"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_21"
  op: "Assign"
  input: "decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "save/RestoreV2:21"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L2/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_22"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-3/biases"
  input: "save/RestoreV2:22"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_23"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-3/weights"
  input: "save/RestoreV2:23"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_24"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-4/biases"
  input: "save/RestoreV2:24"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_25"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-4/weights"
  input: "save/RestoreV2:25"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_26"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-5/biases"
  input: "save/RestoreV2:26"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_27"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-5/weights"
  input: "save/RestoreV2:27"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_28"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-6/biases"
  input: "save/RestoreV2:28"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_29"
  op: "Assign"
  input: "decoder/L3/estimator/build_estimator/disp-6/weights"
  input: "save/RestoreV2:29"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_30"
  op: "Assign"
  input: "decoder/L3/estimator/get_disp/biases"
  input: "save/RestoreV2:30"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_31"
  op: "Assign"
  input: "decoder/L3/estimator/get_disp/weights"
  input: "save/RestoreV2:31"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_32"
  op: "Assign"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "save/RestoreV2:32"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_33"
  op: "Assign"
  input: "decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "save/RestoreV2:33"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L3/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_34"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-3/biases"
  input: "save/RestoreV2:34"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_35"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-3/weights"
  input: "save/RestoreV2:35"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_36"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-4/biases"
  input: "save/RestoreV2:36"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_37"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-4/weights"
  input: "save/RestoreV2:37"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_38"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-5/biases"
  input: "save/RestoreV2:38"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_39"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-5/weights"
  input: "save/RestoreV2:39"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_40"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-6/biases"
  input: "save/RestoreV2:40"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_41"
  op: "Assign"
  input: "decoder/L4/estimator/build_estimator/disp-6/weights"
  input: "save/RestoreV2:41"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_42"
  op: "Assign"
  input: "decoder/L4/estimator/get_disp/biases"
  input: "save/RestoreV2:42"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_43"
  op: "Assign"
  input: "decoder/L4/estimator/get_disp/weights"
  input: "save/RestoreV2:43"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_44"
  op: "Assign"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "save/RestoreV2:44"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_45"
  op: "Assign"
  input: "decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "save/RestoreV2:45"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L4/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_46"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-3/biases"
  input: "save/RestoreV2:46"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_47"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-3/weights"
  input: "save/RestoreV2:47"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_48"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-4/biases"
  input: "save/RestoreV2:48"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_49"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-4/weights"
  input: "save/RestoreV2:49"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_50"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-5/biases"
  input: "save/RestoreV2:50"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_51"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-5/weights"
  input: "save/RestoreV2:51"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_52"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-6/biases"
  input: "save/RestoreV2:52"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_53"
  op: "Assign"
  input: "decoder/L5/estimator/build_estimator/disp-6/weights"
  input: "save/RestoreV2:53"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_54"
  op: "Assign"
  input: "decoder/L5/estimator/get_disp/biases"
  input: "save/RestoreV2:54"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_55"
  op: "Assign"
  input: "decoder/L5/estimator/get_disp/weights"
  input: "save/RestoreV2:55"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_56"
  op: "Assign"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "save/RestoreV2:56"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_57"
  op: "Assign"
  input: "decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "save/RestoreV2:57"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L5/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_58"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-3/biases"
  input: "save/RestoreV2:58"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_59"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-3/weights"
  input: "save/RestoreV2:59"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-3/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_60"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-4/biases"
  input: "save/RestoreV2:60"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_61"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-4/weights"
  input: "save/RestoreV2:61"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-4/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_62"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-5/biases"
  input: "save/RestoreV2:62"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_63"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-5/weights"
  input: "save/RestoreV2:63"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-5/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_64"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-6/biases"
  input: "save/RestoreV2:64"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_65"
  op: "Assign"
  input: "decoder/L6/estimator/build_estimator/disp-6/weights"
  input: "save/RestoreV2:65"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/build_estimator/disp-6/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_66"
  op: "Assign"
  input: "decoder/L6/estimator/get_disp/biases"
  input: "save/RestoreV2:66"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_67"
  op: "Assign"
  input: "decoder/L6/estimator/get_disp/weights"
  input: "save/RestoreV2:67"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/estimator/get_disp/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_68"
  op: "Assign"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
  input: "save/RestoreV2:68"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_69"
  op: "Assign"
  input: "decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
  input: "save/RestoreV2:69"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@decoder/L6/upsampler/bilinear_upsampling_by_convolution/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_70"
  op: "Assign"
  input: "encoder/conv1a/biases"
  input: "save/RestoreV2:70"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_71"
  op: "Assign"
  input: "encoder/conv1a/weights"
  input: "save/RestoreV2:71"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_72"
  op: "Assign"
  input: "encoder/conv1b/biases"
  input: "save/RestoreV2:72"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_73"
  op: "Assign"
  input: "encoder/conv1b/weights"
  input: "save/RestoreV2:73"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv1b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_74"
  op: "Assign"
  input: "encoder/conv2a/biases"
  input: "save/RestoreV2:74"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_75"
  op: "Assign"
  input: "encoder/conv2a/weights"
  input: "save/RestoreV2:75"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_76"
  op: "Assign"
  input: "encoder/conv2b/biases"
  input: "save/RestoreV2:76"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_77"
  op: "Assign"
  input: "encoder/conv2b/weights"
  input: "save/RestoreV2:77"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv2b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_78"
  op: "Assign"
  input: "encoder/conv3a/biases"
  input: "save/RestoreV2:78"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_79"
  op: "Assign"
  input: "encoder/conv3a/weights"
  input: "save/RestoreV2:79"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_80"
  op: "Assign"
  input: "encoder/conv3b/biases"
  input: "save/RestoreV2:80"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_81"
  op: "Assign"
  input: "encoder/conv3b/weights"
  input: "save/RestoreV2:81"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv3b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_82"
  op: "Assign"
  input: "encoder/conv4a/biases"
  input: "save/RestoreV2:82"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_83"
  op: "Assign"
  input: "encoder/conv4a/weights"
  input: "save/RestoreV2:83"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_84"
  op: "Assign"
  input: "encoder/conv4b/biases"
  input: "save/RestoreV2:84"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_85"
  op: "Assign"
  input: "encoder/conv4b/weights"
  input: "save/RestoreV2:85"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv4b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_86"
  op: "Assign"
  input: "encoder/conv5a/biases"
  input: "save/RestoreV2:86"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_87"
  op: "Assign"
  input: "encoder/conv5a/weights"
  input: "save/RestoreV2:87"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_88"
  op: "Assign"
  input: "encoder/conv5b/biases"
  input: "save/RestoreV2:88"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_89"
  op: "Assign"
  input: "encoder/conv5b/weights"
  input: "save/RestoreV2:89"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv5b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_90"
  op: "Assign"
  input: "encoder/conv6a/biases"
  input: "save/RestoreV2:90"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_91"
  op: "Assign"
  input: "encoder/conv6a/weights"
  input: "save/RestoreV2:91"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6a/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_92"
  op: "Assign"
  input: "encoder/conv6b/biases"
  input: "save/RestoreV2:92"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/biases"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/Assign_93"
  op: "Assign"
  input: "encoder/conv6b/weights"
  input: "save/RestoreV2:93"
  attr {
    key: "T"
    value {
      type: DT_FLOAT
    }
  }
  attr {
    key: "_class"
    value {
      list {
        s: "loc:@encoder/conv6b/weights"
      }
    }
  }
  attr {
    key: "use_locking"
    value {
      b: true
    }
  }
  attr {
    key: "validate_shape"
    value {
      b: true
    }
  }
}
node {
  name: "save/restore_all"
  op: "NoOp"
  input: "^save/Assign"
  input: "^save/Assign_1"
  input: "^save/Assign_10"
  input: "^save/Assign_11"
  input: "^save/Assign_12"
  input: "^save/Assign_13"
  input: "^save/Assign_14"
  input: "^save/Assign_15"
  input: "^save/Assign_16"
  input: "^save/Assign_17"
  input: "^save/Assign_18"
  input: "^save/Assign_19"
  input: "^save/Assign_2"
  input: "^save/Assign_20"
  input: "^save/Assign_21"
  input: "^save/Assign_22"
  input: "^save/Assign_23"
  input: "^save/Assign_24"
  input: "^save/Assign_25"
  input: "^save/Assign_26"
  input: "^save/Assign_27"
  input: "^save/Assign_28"
  input: "^save/Assign_29"
  input: "^save/Assign_3"
  input: "^save/Assign_30"
  input: "^save/Assign_31"
  input: "^save/Assign_32"
  input: "^save/Assign_33"
  input: "^save/Assign_34"
  input: "^save/Assign_35"
  input: "^save/Assign_36"
  input: "^save/Assign_37"
  input: "^save/Assign_38"
  input: "^save/Assign_39"
  input: "^save/Assign_4"
  input: "^save/Assign_40"
  input: "^save/Assign_41"
  input: "^save/Assign_42"
  input: "^save/Assign_43"
  input: "^save/Assign_44"
  input: "^save/Assign_45"
  input: "^save/Assign_46"
  input: "^save/Assign_47"
  input: "^save/Assign_48"
  input: "^save/Assign_49"
  input: "^save/Assign_5"
  input: "^save/Assign_50"
  input: "^save/Assign_51"
  input: "^save/Assign_52"
  input: "^save/Assign_53"
  input: "^save/Assign_54"
  input: "^save/Assign_55"
  input: "^save/Assign_56"
  input: "^save/Assign_57"
  input: "^save/Assign_58"
  input: "^save/Assign_59"
  input: "^save/Assign_6"
  input: "^save/Assign_60"
  input: "^save/Assign_61"
  input: "^save/Assign_62"
  input: "^save/Assign_63"
  input: "^save/Assign_64"
  input: "^save/Assign_65"
  input: "^save/Assign_66"
  input: "^save/Assign_67"
  input: "^save/Assign_68"
  input: "^save/Assign_69"
  input: "^save/Assign_7"
  input: "^save/Assign_70"
  input: "^save/Assign_71"
  input: "^save/Assign_72"
  input: "^save/Assign_73"
  input: "^save/Assign_74"
  input: "^save/Assign_75"
  input: "^save/Assign_76"
  input: "^save/Assign_77"
  input: "^save/Assign_78"
  input: "^save/Assign_79"
  input: "^save/Assign_8"
  input: "^save/Assign_80"
  input: "^save/Assign_81"
  input: "^save/Assign_82"
  input: "^save/Assign_83"
  input: "^save/Assign_84"
  input: "^save/Assign_85"
  input: "^save/Assign_86"
  input: "^save/Assign_87"
  input: "^save/Assign_88"
  input: "^save/Assign_89"
  input: "^save/Assign_9"
  input: "^save/Assign_90"
  input: "^save/Assign_91"
  input: "^save/Assign_92"
  input: "^save/Assign_93"
}
versions {
  producer: 134
}
